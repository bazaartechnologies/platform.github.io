{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Platform Engineering KB","text":""},{"location":"#project-layout","title":"Project layout","text":"<pre><code>Platform Tools/\n    Platform sdk/           # Platform SDK documentation\n        Logging/           # Logging and observability features\n            logbook.md    # HTTP logging with Logbook\n    ...\n\nTeleport/                 # Teleport documentation and guides\n    Getting Started/      # Quick start guides for Teleport\n    Access Requests/      # Managing access requests\n    ...\n</code></pre>"},{"location":"defectdojo/","title":"DefectDojo Playbook","text":""},{"location":"defectdojo/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>Accessing DefectDojo</li> <li>Viewing Your Engagements</li> <li>Managing Test</li> <li>Managing Tickets</li> <li>Adding Comments</li> <li>Best Practices</li> <li>Need Help?</li> </ul>"},{"location":"defectdojo/#introduction","title":"Introduction","text":"<p>DefectDojo is an open-source application vulnerability management tool used to track findings, perform security testing, manage engagements, and streamline communication with developers and stakeholders. It is commonly used by security engineers, developers, and product owners to manage the lifecycle of vulnerabilities.</p>"},{"location":"defectdojo/#accessing-defectdojo","title":"Accessing DefectDojo","text":"<ol> <li>Visit the DefectDojo instance behind the teleport.<ul> <li>https://defectdojo.bazaar-engineering.com</li> </ul> </li> <li>Login using your corporate credentials.</li> <li>You will land on the dashboard where you can see statistics, recent engagements, and findings</li> </ol>"},{"location":"defectdojo/#viewing-your-engagements","title":"Viewing Your Engagements","text":"<ol> <li>From the sidebar, click Engagements under the Product menu</li> <li>Use filters to narrow by Engagements, Product or Status.</li> <li>Click on any engagement to view:<ul> <li>Test type (e.g., API Scan, Web App Pentest, Gateway Cleaning)</li> <li>Engagement dates and status</li> <li>Associated findings</li> </ul> </li> </ol>"},{"location":"defectdojo/#managing-tests","title":"Managing Tests","text":"<p>Each engagement can have associated tests to evaluate the product's security posture.</p> <ol> <li>Navigate to the Tests tab inside an engagement</li> <li>Click on a test to view details.</li> </ol>"},{"location":"defectdojo/#managing-tickets","title":"Managing Tickets","text":"<ol> <li>Navigate to the Findings tab inside Tests</li> <li>Click on a finding to view its details</li> </ol>"},{"location":"defectdojo/#request-peer-review","title":"Request Peer Review","text":"<p>Once you understand and fix the ticket (finding), you can initiate a peer review.</p> <ol> <li>After addressing the issue in the finding, click on the hamburger (three horizontal lines) icon on the right side of the finding.</li> <li>Select Request Peer Review from the dropdown menu.</li> <li>Add the Reviewers (team members you want to review the fix).</li> <li>Add any relevant comments or notes for the review process.</li> <li>The reviewers will be notified and can provide feedback or approve the fix.</li> </ol>"},{"location":"defectdojo/#watch-this-video","title":"Watch This Video","text":"<p>Here\u2019s a video demonstrating the process: - Click here to watch the video</p>"},{"location":"defectdojo/#best-practices","title":"Best Practices","text":"<ul> <li>Add meaningful descriptions and comments on findings</li> <li>Regularly update finding statuses and resolutions</li> <li>Use tags to classify or prioritize findings</li> <li>Resolve findings after proper validation</li> <li>Maintain consistent documentation of actions taken</li> </ul>"},{"location":"defectdojo/#need-help","title":"Need Help?","text":"<p>If you need assistance: - Contact the security team on slack: @engr_security</p>"},{"location":"teleport/","title":"Teleport Playbook","text":"<p>How to request for Teleport\u2019s access?</p> <p>Create a ticket on ITA board and mention your role for teleport\u2019s access.</p> <p>Let any one of our team members\u2019 know, they shall process your request and provide you with a link that needs to be configured as soon as you get it, since it has a short expiration time.</p> <p>Note: use Google Authenticator App in your mobile to configure MFA. Teleport does not have support for Microsoft Authenticator.</p> <p>Once you configure teleport, you may log in and navigate to Applications tab to find Watchman, SonarQube and other apps. From there, click on Launch and the respective application will open. If you are using it for the first time you will have to request for the app\u2019s user creation and login with the new credentials that you set. Again, make sure you request for the access when you can configure it ASAP.</p> <p></p> <p></p> <p>FAQs for Watchman:</p> <p>Q. Where can I customize/edit queries to find logs?</p> <p>A. If you want to find logs and write your own queries to search in logs, navigate to Dashboards and click for Browse. Look for \u201cObservability Explorer\u201d dashboard. This dashboard has edit rights where you can customize the queries to find desired logs.</p> <p></p> <p></p> <p></p> <p></p> <p>DO NOT save or apply on these dashboards.</p> <p>Q. Grafana is not opening.</p> <p>A. Login to Teleport first then launch Grafana.</p>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/","title":"Logbook \u2014 Evolving Distributed Tracing &amp; Observability \ud83d\ude80","text":""},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#why-http-logs-matter","title":"\ud83e\udde0 Why HTTP Logs Matter","text":"<p>In our distributed microservices, every request counts \u2014 but without HTTP logs:</p> <ul> <li>We can't trace failures across services</li> <li>Debugging becomes guesswork</li> <li>Sensitive data may be logged inconsistently</li> <li>It's hard to correlate with tracing systems</li> </ul>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#our-solution-logbook-via-platform-sdk","title":"\u2705 Our Solution: Logbook via <code>platform-sdk</code>","text":"<p>We've standardized HTTP logging using Logbook, bundled inside our internal <code>platform-sdk</code>.</p>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#what-it-gives-you","title":"What it gives you:","text":"<ul> <li>Logs method, http path, status, body, type, http method</li> <li>Adds <code>trace_id</code>, <code>ipAddress</code>, <code>bazaarClientKey</code>, <code>userId</code></li> <li>Automatically redacts sensitive data</li> <li>Sends all logs to Grafana Loki \u2192 tenant: <code>httplogs</code></li> <li>Integrates with distributed tracing (Tempo, OpenTelemetry)</li> </ul>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#benefits-to-you","title":"\ud83e\ude84 Benefits to You","text":"Benefit What It Means \ud83d\udd0d Faster debugging See full request/response payloads, instantly spot issues \ud83e\uddf5 End-to-end tracing Follow a request across services using <code>trace_id</code> \ud83d\udee1 Secure by default Redacts fields like <code>refreshToken</code>, <code>token</code>, <code>Authorisation</code> \u2699\ufe0f Zero setup Works out-of-the-box with the Platform SDK \ud83d\udd04 Configurable Toggle redaction/masking via GitOps config in real-time \u2014 no CI"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#how-to-enable-http-logs-in-your-microservice","title":"\u2699\ufe0f How to Enable HTTP Logs in Your Microservice","text":"<p>Logbook is available via <code>platform-sdk</code> v5.3.2. To enable HTTP logging:</p>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#1-add-platform-sdk-dependency-version-532","title":"\u2705 1. Add <code>platform-sdk</code> dependency \u2014 version 5.3.2","text":"<p>Already included:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.bazaar&lt;/groupId&gt;\n    &lt;artifactId&gt;platform-sdk&lt;/artifactId&gt;\n    &lt;version&gt;5.3.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#2-annotate-your-main-application","title":"\u2705 2. Annotate Your Main Application","text":"<p>In your <code>@SpringBootApplication</code> class, add:</p> <pre><code>@SpringBootApplication\n@EnableHttpLogs\npublic class MyServiceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyServiceApplication.class, args);\n    }\n}\n</code></pre>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#3-set-log-level-for-logbook","title":"\u2705 3. Set Log Level for Logbook","text":"<p>In <code>application.yml</code> :</p> <pre><code>logging:\n  level:\n    org:\n      zalando:\n        logbook:\n          Logbook: TRACE\n</code></pre>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#4-how-to-enable-or-disable-redaction","title":"\u2705 4. How to Enable or Disable Redaction","text":"<p>You must set the following env var in your container spec:</p> <pre><code>- name: HTTPLOG_REDACTION_ENABLED\n  value: \"true\"   # or \"false\"\n</code></pre> <p></p>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#behavior","title":"\ud83d\udccc Behavior","text":"Value Result <code>\"true\"</code> Redacts sensitive fields like <code>refreshToken</code>, <code>token</code>, <code>Authorization</code> <code>\"false\"</code> Shows full request/response payloads (use only in dev or debug scenarios)"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#5-deploy-verify-in-loki","title":"\u2705 5. Deploy &amp; Verify in Loki","text":"<p>Logs will appear in Grafana Loki, tenant: <code>httplogs</code></p> <p></p>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#example-filter-logs-for-a-specific-service","title":"\ud83d\udd0d Example: Filter Logs for a Specific Service","text":"<p>Let's say you want to view all <code>POST</code> requests to <code>/v3/auth/otp/signup/generate</code> with status 200 and of type response.</p>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#logql-query","title":"\u2705 LogQL Query:","text":"<pre><code>{service=\"order-service\", httpMethod=\"POST\", httpPath=\"/v3/auth/otp/signup/generate\", type=\"response\", status=\"200\"}\n</code></pre>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#tips-for-building-queries","title":"\ud83d\udee0\ufe0f Tips for Building Queries","text":""},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#1-filter-by-http-method","title":"\ud83d\udd0e 1. Filter by HTTP Method","text":"<pre><code>{service=\"order-service\", httpMethod=\"GET\"}\n</code></pre>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#2-filter-by-path-prefix-fuzzy-search","title":"\ud83d\udccd 2. Filter by Path Prefix (Fuzzy Search)","text":"<p>If exact match doesn't work (e.g., dynamic path values), use <code>|~</code> for regex:</p> <pre><code>{service=\"order-service\", type=\"response\"} |~ \"/v3/auth/otp/.*\n</code></pre>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#3-filter-by-status-code","title":"\ud83e\uddf5 3. Filter by Status Code","text":"<pre><code>{service=\"order-service\", status=\"500\"}  // See internal errors\n</code></pre>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#4-only-show-request-logs","title":"\ud83e\uddea 4. Only Show Request Logs","text":"<pre><code>{service=\"order-service\", type=\"request\"}\n</code></pre>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#5-see-all-logs-for-a-given-trace","title":"\ud83d\udd0d 5. See All Logs for a Given Trace","text":"<pre><code>{service=\"order-service\", trace_id=\"8be8acdf485a541a9234024822e50334\"}\n</code></pre>"},{"location":"Platform%20Tools/Platform%20sdk/Logging/logbook/#combine-multiple-filters","title":"\ud83d\udd01 Combine Multiple Filters","text":"<p>Example: All failing <code>POST</code> requests to auth endpoint:</p> <pre><code>{service=\"order-service\", httpMethod=\"POST\", httpPath=\"/v3/auth/otp/verify\", status=~\"4..|5..\"}\n</code></pre>"}]}